(require 'asdf)

(asdf:load-system :uiop)

(defmacro define-file-type-mapper (&rest mappings)
  "Define a function that returns file types based on extensions.
   Usage: (define-file-type-mapper
            (\"png\" \"Image\")
            (\"jpg\" \"Image\")
            (\"pdf\" \"Document\")
            ...)"
  `(lambda (extension)
     (cond
       ,@(loop for (ext type) in mappings
               collect `((string= ,ext extension) ,type))
       (t "Error: Unknown file type"))))

;; Define the file-type mapper using the macro
(defparameter *file-type-from-extension*
  (define-file-type-mapper
    ("png" "Image")
    ("jpg" "Image")
    ("jpeg" "Image")
    ("gif" "Image")
    ("bmp" "Image")
    ("xpm" "Image")
    ("svg" "Image")
    ("pdf" "Document")
    ("doc" "Document")
    ("docx" "Document")
    ("txt" "Document")
    ("odt" "Document")
    ("rtf" "Document")
    ("org" "Org Document")
    ("mp3" "Audio")
    ("wav" "Audio")
    ("ogg" "Audio")
    ("flac" "Audio")
    ("mp4" "Video")
    ("avi" "Video")
    ("mkv" "Video")
    ("mov" "Video")
    ("zip" "Archive")
    ("tar" "Archive")
    ("gz" "Archive")
    ("rar" "Archive")))

(defun list-files-and-types (directory)
  "List all files in the DIRECTORY and print them in the format:
   'File name: <path>, File type: <type>'."
  (format t "Base directory: ~a~%" (namestring directory))
  (dolist (file (uiop:directory-files directory))
    (let* ((full-filepath   (namestring file))
           (filename        (file-namestring file))
           (file-extension  (pathname-type full-filepath))
           (file-type       (funcall *file-type-from-extension* file-extension)))
      (format t "File name: ~a, File type: ~a~%" (namestring filename) file-type))))


;; -----------------------------------------------------------------------------------------------------------------

;; TODO, test sorting on copied dir

;; (defmacro define-file-sorting-rules (&rest rules)
;;   "Define file sorting rules in the format (EXTENSION TARGET-DIRECTORY).
;;    Example: (define-file-sorting-rules (\"png\" \"~/Pictures/\") (\"pdf\" \"~/Documents/\"))"
;;   `(lambda (file)
;;      (let* ((pathname (uiop:parse-native-namestring file))
;;             (file-extension (uiop:pathname-type pathname)))
;;        (cond
;;          ;; Dynamically create file sorting rules
;;          ,@(loop for (ext dir) in rules
;;                  collect `((string= ,ext file-extension)
;;                            (let ((target (merge-pathnames (uiop:pathname-name pathname)
;;                                                           (uiop:parse-native-namestring ,dir))))
;;                              (uiop:ensure-directories-exist target)
;;                              (uiop:move-file pathname target)
;;                              (format t "Moved ~a to ~a~%" (namestring pathname) (namestring target)))))
;;          (t (format t "No matching rule for ~a~%" (namestring pathname)))))))

;; (defun sort-files (directory sort-fn)
;;   "Sort files in DIRECTORY using the SORT-FN generated by define-file-sorting-rules."
;;   (dolist (file (uiop:directory-files directory))
;;     (funcall sort-fn file)))

;; -----------------------------------------------------------------------------------------------------------------
